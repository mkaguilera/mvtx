// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: MvtkvsService.proto
#ifndef GRPC_MvtkvsService_2eproto__INCLUDED
#define GRPC_MvtkvsService_2eproto__INCLUDED

#include "MvtkvsService.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace mvtkvs {

class Mvtkvs GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Read(::grpc::ClientContext* context, const ::mvtkvs::ReadRequest& request, ::mvtkvs::ReadReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvtkvs::ReadReply>> AsyncRead(::grpc::ClientContext* context, const ::mvtkvs::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvtkvs::ReadReply>>(AsyncReadRaw(context, request, cq));
    }
    virtual ::grpc::Status Write(::grpc::ClientContext* context, const ::mvtkvs::WriteRequest& request, ::mvtkvs::WriteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvtkvs::WriteReply>> AsyncWrite(::grpc::ClientContext* context, const ::mvtkvs::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvtkvs::WriteReply>>(AsyncWriteRaw(context, request, cq));
    }
    virtual ::grpc::Status P1C(::grpc::ClientContext* context, const ::mvtkvs::PhaseOneCommitRequest& request, ::mvtkvs::PhaseOneCommitReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvtkvs::PhaseOneCommitReply>> AsyncP1C(::grpc::ClientContext* context, const ::mvtkvs::PhaseOneCommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvtkvs::PhaseOneCommitReply>>(AsyncP1CRaw(context, request, cq));
    }
    virtual ::grpc::Status P2C(::grpc::ClientContext* context, const ::mvtkvs::PhaseTwoCommitRequest& request, ::mvtkvs::PhaseTwoCommitReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvtkvs::PhaseTwoCommitReply>> AsyncP2C(::grpc::ClientContext* context, const ::mvtkvs::PhaseTwoCommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvtkvs::PhaseTwoCommitReply>>(AsyncP2CRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvtkvs::ReadReply>* AsyncReadRaw(::grpc::ClientContext* context, const ::mvtkvs::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvtkvs::WriteReply>* AsyncWriteRaw(::grpc::ClientContext* context, const ::mvtkvs::WriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvtkvs::PhaseOneCommitReply>* AsyncP1CRaw(::grpc::ClientContext* context, const ::mvtkvs::PhaseOneCommitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvtkvs::PhaseTwoCommitReply>* AsyncP2CRaw(::grpc::ClientContext* context, const ::mvtkvs::PhaseTwoCommitRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Read(::grpc::ClientContext* context, const ::mvtkvs::ReadRequest& request, ::mvtkvs::ReadReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvtkvs::ReadReply>> AsyncRead(::grpc::ClientContext* context, const ::mvtkvs::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvtkvs::ReadReply>>(AsyncReadRaw(context, request, cq));
    }
    ::grpc::Status Write(::grpc::ClientContext* context, const ::mvtkvs::WriteRequest& request, ::mvtkvs::WriteReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvtkvs::WriteReply>> AsyncWrite(::grpc::ClientContext* context, const ::mvtkvs::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvtkvs::WriteReply>>(AsyncWriteRaw(context, request, cq));
    }
    ::grpc::Status P1C(::grpc::ClientContext* context, const ::mvtkvs::PhaseOneCommitRequest& request, ::mvtkvs::PhaseOneCommitReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvtkvs::PhaseOneCommitReply>> AsyncP1C(::grpc::ClientContext* context, const ::mvtkvs::PhaseOneCommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvtkvs::PhaseOneCommitReply>>(AsyncP1CRaw(context, request, cq));
    }
    ::grpc::Status P2C(::grpc::ClientContext* context, const ::mvtkvs::PhaseTwoCommitRequest& request, ::mvtkvs::PhaseTwoCommitReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvtkvs::PhaseTwoCommitReply>> AsyncP2C(::grpc::ClientContext* context, const ::mvtkvs::PhaseTwoCommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvtkvs::PhaseTwoCommitReply>>(AsyncP2CRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::mvtkvs::ReadReply>* AsyncReadRaw(::grpc::ClientContext* context, const ::mvtkvs::ReadRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::mvtkvs::WriteReply>* AsyncWriteRaw(::grpc::ClientContext* context, const ::mvtkvs::WriteRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::mvtkvs::PhaseOneCommitReply>* AsyncP1CRaw(::grpc::ClientContext* context, const ::mvtkvs::PhaseOneCommitRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::mvtkvs::PhaseTwoCommitReply>* AsyncP2CRaw(::grpc::ClientContext* context, const ::mvtkvs::PhaseTwoCommitRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_Read_;
    const ::grpc::RpcMethod rpcmethod_Write_;
    const ::grpc::RpcMethod rpcmethod_P1C_;
    const ::grpc::RpcMethod rpcmethod_P2C_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Read(::grpc::ServerContext* context, const ::mvtkvs::ReadRequest* request, ::mvtkvs::ReadReply* response);
    virtual ::grpc::Status Write(::grpc::ServerContext* context, const ::mvtkvs::WriteRequest* request, ::mvtkvs::WriteReply* response);
    virtual ::grpc::Status P1C(::grpc::ServerContext* context, const ::mvtkvs::PhaseOneCommitRequest* request, ::mvtkvs::PhaseOneCommitReply* response);
    virtual ::grpc::Status P2C(::grpc::ServerContext* context, const ::mvtkvs::PhaseTwoCommitRequest* request, ::mvtkvs::PhaseTwoCommitReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Read() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Read() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::mvtkvs::ReadRequest* request, ::mvtkvs::ReadReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::mvtkvs::ReadRequest* request, ::grpc::ServerAsyncResponseWriter< ::mvtkvs::ReadReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Write() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Write() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, const ::mvtkvs::WriteRequest* request, ::mvtkvs::WriteReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::mvtkvs::WriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::mvtkvs::WriteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_P1C : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_P1C() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_P1C() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status P1C(::grpc::ServerContext* context, const ::mvtkvs::PhaseOneCommitRequest* request, ::mvtkvs::PhaseOneCommitReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestP1C(::grpc::ServerContext* context, ::mvtkvs::PhaseOneCommitRequest* request, ::grpc::ServerAsyncResponseWriter< ::mvtkvs::PhaseOneCommitReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_P2C : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_P2C() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_P2C() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status P2C(::grpc::ServerContext* context, const ::mvtkvs::PhaseTwoCommitRequest* request, ::mvtkvs::PhaseTwoCommitReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestP2C(::grpc::ServerContext* context, ::mvtkvs::PhaseTwoCommitRequest* request, ::grpc::ServerAsyncResponseWriter< ::mvtkvs::PhaseTwoCommitReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Read<WithAsyncMethod_Write<WithAsyncMethod_P1C<WithAsyncMethod_P2C<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Read() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Read() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::mvtkvs::ReadRequest* request, ::mvtkvs::ReadReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Write() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Write() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, const ::mvtkvs::WriteRequest* request, ::mvtkvs::WriteReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_P1C : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_P1C() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_P1C() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status P1C(::grpc::ServerContext* context, const ::mvtkvs::PhaseOneCommitRequest* request, ::mvtkvs::PhaseOneCommitReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_P2C : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_P2C() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_P2C() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status P2C(::grpc::ServerContext* context, const ::mvtkvs::PhaseTwoCommitRequest* request, ::mvtkvs::PhaseTwoCommitReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Read() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::mvtkvs::ReadRequest, ::mvtkvs::ReadReply>(std::bind(&WithStreamedUnaryMethod_Read<BaseClass>::StreamedRead, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Read() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::mvtkvs::ReadRequest* request, ::mvtkvs::ReadReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRead(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvtkvs::ReadRequest,::mvtkvs::ReadReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Write() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::mvtkvs::WriteRequest, ::mvtkvs::WriteReply>(std::bind(&WithStreamedUnaryMethod_Write<BaseClass>::StreamedWrite, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Write() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, const ::mvtkvs::WriteRequest* request, ::mvtkvs::WriteReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWrite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvtkvs::WriteRequest,::mvtkvs::WriteReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_P1C : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_P1C() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::mvtkvs::PhaseOneCommitRequest, ::mvtkvs::PhaseOneCommitReply>(std::bind(&WithStreamedUnaryMethod_P1C<BaseClass>::StreamedP1C, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_P1C() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status P1C(::grpc::ServerContext* context, const ::mvtkvs::PhaseOneCommitRequest* request, ::mvtkvs::PhaseOneCommitReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedP1C(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvtkvs::PhaseOneCommitRequest,::mvtkvs::PhaseOneCommitReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_P2C : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_P2C() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::mvtkvs::PhaseTwoCommitRequest, ::mvtkvs::PhaseTwoCommitReply>(std::bind(&WithStreamedUnaryMethod_P2C<BaseClass>::StreamedP2C, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_P2C() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status P2C(::grpc::ServerContext* context, const ::mvtkvs::PhaseTwoCommitRequest* request, ::mvtkvs::PhaseTwoCommitReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedP2C(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvtkvs::PhaseTwoCommitRequest,::mvtkvs::PhaseTwoCommitReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Read<WithStreamedUnaryMethod_Write<WithStreamedUnaryMethod_P1C<WithStreamedUnaryMethod_P2C<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Read<WithStreamedUnaryMethod_Write<WithStreamedUnaryMethod_P1C<WithStreamedUnaryMethod_P2C<Service > > > > StreamedService;
};

}  // namespace mvtkvs


#endif  // GRPC_MvtkvsService_2eproto__INCLUDED
